// <auto-generated />
using System;
using AgilleApi.Data.ContextDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AgilleApi.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220815204454_ChecklistUser")]
    partial class ChecklistUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AgilleApi.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Complement")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Function")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.AddressPerson", b =>
                {
                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AddressId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonAddress", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UrlMetadata")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Attachment", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CardCrossingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndingReference")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("RequestedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingReference")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CardCrossingReport", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CardDivergencyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountOnAverageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountOnDeclaredRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeclaredRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Difference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InvoiceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TransactionsCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReportId");

                    b.ToTable("CardDivergencyEntry", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Checklist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Justification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Checklists");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ChecklistAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChecklistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ChecklistId");

                    b.ToTable("ChecklistAttachments");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("City", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CompanyCardRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CardOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CardOperatorId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyCardRate", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Coordenate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Lat")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Lng")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("ProprietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProprietyId");

                    b.ToTable("Coordenates");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.DataCrossing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndingReference")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ResponsibleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartingReference")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DataCrossing", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.DivergencyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DataCrossingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Difference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InvoiceValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransactionValue")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DataCrossingId");

                    b.ToTable("DivergencyEntry", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.DynamicFieldOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Column")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ColumnKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayColumn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DisplayTable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Schema")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Table")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DynamicFieldOptions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2f4b53a-7052-48e7-bfdd-f18ef4629cb5"),
                            Code = "[[user-token]]",
                            Column = "SetPasswordToken",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1073),
                            DisplayColumn = "Token",
                            DisplayTable = "User",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "User"
                        },
                        new
                        {
                            Id = new Guid("21007289-6a0e-49d8-bd3c-608affdea9eb"),
                            Code = "[[confirmation-token]]",
                            Column = "ConfirmationToken",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1089),
                            DisplayColumn = "ConfirmationToken",
                            DisplayTable = "User",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "User"
                        },
                        new
                        {
                            Id = new Guid("c0ebae45-9c31-411c-b450-d37bb72fd758"),
                            Code = "[[person-name]]",
                            Column = "Name",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1091),
                            DisplayColumn = "Nome",
                            DisplayTable = "Pessoa",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Person"
                        },
                        new
                        {
                            Id = new Guid("24ac716f-4efb-4fe2-a247-e2b1f5ca08f6"),
                            Code = "[[person-document]]",
                            Column = "Document",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1092),
                            DisplayColumn = "Document",
                            DisplayTable = "Person",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Person"
                        },
                        new
                        {
                            Id = new Guid("a7febb48-afaa-4ab6-b560-2bc62a943048"),
                            Code = "[[person-display-name]]",
                            Column = "DisplayName",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1094),
                            DisplayColumn = "Nome de exibição",
                            DisplayTable = "Person",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Person"
                        },
                        new
                        {
                            Id = new Guid("f1542c1a-2736-4278-a13e-fd282474bb71"),
                            Code = "[[description]]",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1095),
                            DisplayColumn = "Descrição do e-mail",
                            DisplayTable = "Others",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("d307caf9-2145-4003-a59d-46a994b55f01"),
                            Code = "[[attachment-url]]",
                            Column = "Url",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1109),
                            DisplayColumn = "Url",
                            DisplayTable = "Attachment",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Attachment"
                        },
                        new
                        {
                            Id = new Guid("6fe29ce4-ef84-472f-bc6d-56b9b3918050"),
                            Code = "[[attachment-url]]",
                            Column = "Url",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1111),
                            DisplayColumn = "Url",
                            DisplayTable = "Attachment",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Attachment"
                        },
                        new
                        {
                            Id = new Guid("b60070c2-8a3a-4a5d-a83c-88bca76c314d"),
                            Code = "[[phone-number]]",
                            Column = "Number",
                            ColumnKey = "Id",
                            CreatedAt = new DateTime(2022, 8, 15, 17, 44, 52, 982, DateTimeKind.Local).AddTicks(1112),
                            DisplayColumn = "Number",
                            DisplayTable = "Phone",
                            LastUpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Schema = "[dbo]",
                            Table = "Phone"
                        });
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Email", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.EmailPerson", b =>
                {
                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmailId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("EmailPerson", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ImportFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSimplified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ManualFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId")
                        .IsUnique()
                        .HasFilter("[AttachmentId] IS NOT NULL");

                    b.HasIndex("ManualFileId")
                        .IsUnique()
                        .HasFilter("[ManualFileId] IS NOT NULL");

                    b.ToTable("ImportFile", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.InvoiceEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DataCrossingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImportFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MunicipalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DataCrossingId");

                    b.HasIndex("ImportFileId");

                    b.ToTable("InvoiceEntry", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CardRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCardOperator")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MunicipalRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhysicalPersonBaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("PhysicalPersonBaseId");

                    b.ToTable("JuridicalPerson", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("JuridicalPerson");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonNotices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JuridicalPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NoticeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("WasViewed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("JuridicalPersonId");

                    b.HasIndex("NoticeId");

                    b.ToTable("JuridicalPersonNotices");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonServiceTypeDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JuridicalPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceTypeDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuridicalPersonId");

                    b.HasIndex("ServiceTypeDescriptionId");

                    b.ToTable("JuridicalPersonServiceTypeDescriptions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.MessageQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MessageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Observation")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SendCopyMyself")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendCopyTo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SendFrom")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("SendTo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageTemplateId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.MessageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendCopyToMyself")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MessagesTemplates", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Notice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Aliquot")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Observation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RateType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReturnProtocolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TaxPayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ReturnProtocolId");

                    b.HasIndex("TaxPayerId");

                    b.HasIndex("TemplateId");

                    b.ToTable("Notices", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.NoticeDivergencyEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DivergencyEntryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NoticeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NoticeId");

                    b.ToTable("NoticeDivergencyEntries");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.NoticeTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DaysToExpire")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Module")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Template")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NoticeTemplates", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Param", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Param", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("OwnerPermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissionGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerPermissionId");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PersonBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CibNumber")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneralRecord")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImmunityYears")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InventoryObs")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<Guid?>("InventoryPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("LegalRepresentativeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LegalRepresentativeObs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ProfilePicUrl")
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.Property<string>("ReasonForImmunity")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SocialName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InventoryPersonId");

                    b.HasIndex("LegalRepresentativeId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Phone", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PhysicalPersonBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("PhysicalPerson", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("PhysicalPerson");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("OwnerProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerProfileId");

                    b.ToTable("Profile", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Propriety", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CARNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CharacteristicsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CibNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("DeclaredArea")
                        .HasColumnType("float");

                    b.Property<Guid?>("FromAttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HasPropertyCertificate")
                        .HasColumnType("bit");

                    b.Property<bool>("HasRegularizedLegalReserve")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSettlement")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSquattersInTheArea")
                        .HasColumnType("bit");

                    b.Property<string>("IncraCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("LegalReserveArea")
                        .HasColumnType("float");

                    b.Property<string>("LinkedCib")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MunicipalRegistration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OccupancyPercentage")
                        .HasColumnType("float");

                    b.Property<double>("OccupancyTime")
                        .HasColumnType("float");

                    b.Property<string>("Registration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettlementName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SettlementType")
                        .HasColumnType("int");

                    b.Property<string>("Situation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CharacteristicsId");

                    b.HasIndex("ContactId");

                    b.HasIndex("FromAttachmentId");

                    b.ToTable("Propriety", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("ProprietyAddress", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProprietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("ProprietyId");

                    b.ToTable("ProprietyAttachments");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyCattle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Buffalos")
                        .HasColumnType("int");

                    b.Property<int>("Cattle")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Equine")
                        .HasColumnType("int");

                    b.Property<int>("Goats")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<Guid>("ProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Sheep")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProcedureId");

                    b.ToTable("ProprietyCattles");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyCharacteristics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasElectricity")
                        .HasColumnType("bit");

                    b.Property<bool>("HasFishingPotential")
                        .HasColumnType("bit");

                    b.Property<bool>("HasInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNaturalWaterSpring")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPotentialForEcotourism")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProprietyCharacteristics", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProprietyContact", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyOwners", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProprietyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ProprietyId");

                    b.ToTable("ProprietyOwners");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ReturnProtocol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("SignedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ReturnProtocols");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ServiceTypeDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ISSAnnualValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ISSRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceTypeDescriptions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.SocialMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("SocialMedia", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.State", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("State", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("StatusCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StatusCategoryId");

                    b.ToTable("Status", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.StatusCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("StatusCategories", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<int?>("FromStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("NoticeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StatusHasChanged")
                        .HasColumnType("bit");

                    b.Property<int?>("ToStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NoticeId");

                    b.ToTable("TaxActions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxParam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParamType")
                        .HasColumnType("int");

                    b.Property<Guid>("TaxProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaxProcedureId");

                    b.ToTable("TaxParams");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Taxpayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JuridicalPersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JuridicalPersonId");

                    b.ToTable("Taxpayers", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxProcedure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CibNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntimationYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProcessNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProprietyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProprietyId");

                    b.ToTable("TaxProcedure", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ARCode")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ARTermUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CutOffDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("FineAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ForwardTermUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JoiningTermUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxProcedureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TrackingCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TaxProcedureId");

                    b.ToTable("TaxStages");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TemplateProfilePermissions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("ProfileId");

                    b.ToTable("TemplateProfilePermissions", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TransactionEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardOperatorDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DataCrossingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImportFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ReferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("DataCrossingId");

                    b.HasIndex("ImportFileId");

                    b.ToTable("TransactionEntry", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.UnionTransfers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("UnionTransfers");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CustomPermissions")
                        .HasColumnType("bit");

                    b.Property<Guid>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SetPasswordToken")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TokenPushNotifications")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.HasIndex("ProfileId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.UserPermission", b =>
                {
                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPermission", (string)null);
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Address", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.City", "City")
                        .WithMany("Adresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.AddressPerson", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Address", "Address")
                        .WithMany("AddressPersons")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CardDivergencyEntry", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.CardCrossingReport", "Report")
                        .WithMany("Divergencies")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Report");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ChecklistAttachment", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Checklist", "Checklist")
                        .WithMany("Attachments")
                        .HasForeignKey("ChecklistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Checklist");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.City", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CompanyCardRate", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "CardOperator")
                        .WithMany()
                        .HasForeignKey("CardOperatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CardOperator");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Coordenate", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Propriety", "Propriety")
                        .WithMany("Coordenates")
                        .HasForeignKey("ProprietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriety");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.DivergencyEntry", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.DataCrossing", "DataCrossing")
                        .WithMany("DivergencyEntries")
                        .HasForeignKey("DataCrossingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataCrossing");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.EmailPerson", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Email", "Email")
                        .WithMany("EmailPersons")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithMany("EmailPersons")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ImportFile", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "Attachment")
                        .WithOne()
                        .HasForeignKey("AgilleApi.Domain.Entities.ImportFile", "AttachmentId");

                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "ManualFile")
                        .WithOne()
                        .HasForeignKey("AgilleApi.Domain.Entities.ImportFile", "ManualFileId");

                    b.Navigation("Attachment");

                    b.Navigation("ManualFile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.InvoiceEntry", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.DataCrossing", null)
                        .WithMany("InvoiceEntries")
                        .HasForeignKey("DataCrossingId");

                    b.HasOne("AgilleApi.Domain.Entities.ImportFile", "ImportFile")
                        .WithMany("InvoiceEntries")
                        .HasForeignKey("ImportFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportFile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonBase", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithOne("JuridicalPerson")
                        .HasForeignKey("AgilleApi.Domain.Entities.JuridicalPersonBase", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.PhysicalPersonBase", null)
                        .WithMany("Companies")
                        .HasForeignKey("PhysicalPersonBaseId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonNotices", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "JuridicalPerson")
                        .WithMany()
                        .HasForeignKey("JuridicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Notice", "Notice")
                        .WithMany()
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JuridicalPerson");

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.JuridicalPersonServiceTypeDescription", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "JuridicalPerson")
                        .WithMany()
                        .HasForeignKey("JuridicalPersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.ServiceTypeDescription", "ServiceTypeDescription")
                        .WithMany()
                        .HasForeignKey("ServiceTypeDescriptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JuridicalPerson");

                    b.Navigation("ServiceTypeDescription");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.MessageQueue", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.MessageTemplate", "MessageTemplate")
                        .WithMany("MessageQueues")
                        .HasForeignKey("MessageTemplateId");

                    b.HasOne("AgilleApi.Domain.Entities.User", "User")
                        .WithMany("MessageQueues")
                        .HasForeignKey("UserId");

                    b.Navigation("MessageTemplate");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Notice", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.ReturnProtocol", "ReturnProtocol")
                        .WithMany()
                        .HasForeignKey("ReturnProtocolId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "TaxPayer")
                        .WithMany()
                        .HasForeignKey("TaxPayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.NoticeTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("ReturnProtocol");

                    b.Navigation("TaxPayer");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.NoticeDivergencyEntry", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Notice", "Notice")
                        .WithMany("NoticeDivergencyEntries")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Permission", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Permission", "OwnerPermission")
                        .WithMany("Permissions")
                        .HasForeignKey("OwnerPermissionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerPermission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PersonBase", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "InventoryPerson")
                        .WithMany()
                        .HasForeignKey("InventoryPersonId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "LegalRepresentative")
                        .WithMany()
                        .HasForeignKey("LegalRepresentativeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("InventoryPerson");

                    b.Navigation("LegalRepresentative");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Phone", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithMany("Phones")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PhysicalPersonBase", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "Company")
                        .WithOne()
                        .HasForeignKey("AgilleApi.Domain.Entities.PhysicalPersonBase", "CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithOne("PhysicalPerson")
                        .HasForeignKey("AgilleApi.Domain.Entities.PhysicalPersonBase", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Profile", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Profile", "OwnerProfile")
                        .WithMany("Profiles")
                        .HasForeignKey("OwnerProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OwnerProfile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Propriety", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.ProprietyAddress", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgilleApi.Domain.Entities.ProprietyCharacteristics", "Characteristics")
                        .WithMany()
                        .HasForeignKey("CharacteristicsId");

                    b.HasOne("AgilleApi.Domain.Entities.ProprietyContact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "FromAttachment")
                        .WithMany()
                        .HasForeignKey("FromAttachmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Address");

                    b.Navigation("Characteristics");

                    b.Navigation("Contact");

                    b.Navigation("FromAttachment");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyAddress", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyAttachment", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Propriety", "Propriety")
                        .WithMany("Attachments")
                        .HasForeignKey("ProprietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Propriety");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyCattle", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.TaxProcedure", "Procedure")
                        .WithMany("Cattles")
                        .HasForeignKey("ProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ProprietyOwners", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Owner")
                        .WithMany("Proprieties")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Propriety", "Propriety")
                        .WithMany("Owners")
                        .HasForeignKey("ProprietyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Propriety");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ServiceTypeDescription", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.ServiceType", "ServiceType")
                        .WithMany("Descriptions")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.SocialMedia", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithMany("SocialMedias")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.State", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Status", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.StatusCategory", "StatusCategory")
                        .WithMany()
                        .HasForeignKey("StatusCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("StatusCategory");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxAction", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Notice", "Notice")
                        .WithMany("TaxActions")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxParam", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.TaxProcedure", "TaxProcedure")
                        .WithMany("TaxParams")
                        .HasForeignKey("TaxProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TaxProcedure");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Taxpayer", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.JuridicalPersonBase", "JuridicalPerson")
                        .WithMany()
                        .HasForeignKey("JuridicalPersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JuridicalPerson");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxProcedure", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Propriety", "Propriety")
                        .WithMany()
                        .HasForeignKey("ProprietyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propriety");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxStage", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AgilleApi.Domain.Entities.TaxProcedure", "TaxProcedure")
                        .WithMany("TaxStages")
                        .HasForeignKey("TaxProcedureId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Subject");

                    b.Navigation("TaxProcedure");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TemplateProfilePermissions", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Permission", "Permission")
                        .WithMany("TemplateProfilePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Profile", "Profile")
                        .WithMany("TemplateProfilePermissions")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TransactionEntry", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.DataCrossing", null)
                        .WithMany("TransactionEntries")
                        .HasForeignKey("DataCrossingId");

                    b.HasOne("AgilleApi.Domain.Entities.ImportFile", "ImportFile")
                        .WithMany("TransactionEntries")
                        .HasForeignKey("ImportFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImportFile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.User", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Email", "Email")
                        .WithMany("Users")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.PersonBase", "Person")
                        .WithOne("User")
                        .HasForeignKey("AgilleApi.Domain.Entities.User", "PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.Profile", "Profile")
                        .WithMany("Users")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Person");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.UserPermission", b =>
                {
                    b.HasOne("AgilleApi.Domain.Entities.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AgilleApi.Domain.Entities.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Address", b =>
                {
                    b.Navigation("AddressPersons");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.CardCrossingReport", b =>
                {
                    b.Navigation("Divergencies");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Checklist", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.City", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.DataCrossing", b =>
                {
                    b.Navigation("DivergencyEntries");

                    b.Navigation("InvoiceEntries");

                    b.Navigation("TransactionEntries");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Email", b =>
                {
                    b.Navigation("EmailPersons");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ImportFile", b =>
                {
                    b.Navigation("InvoiceEntries");

                    b.Navigation("TransactionEntries");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.MessageTemplate", b =>
                {
                    b.Navigation("MessageQueues");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Notice", b =>
                {
                    b.Navigation("NoticeDivergencyEntries");

                    b.Navigation("TaxActions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Permission", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("TemplateProfilePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PersonBase", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("EmailPersons");

                    b.Navigation("JuridicalPerson");

                    b.Navigation("Phones");

                    b.Navigation("PhysicalPerson");

                    b.Navigation("Proprieties");

                    b.Navigation("SocialMedias");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.PhysicalPersonBase", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Profiles");

                    b.Navigation("TemplateProfilePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.Propriety", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Coordenates");

                    b.Navigation("Owners");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.ServiceType", b =>
                {
                    b.Navigation("Descriptions");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.TaxProcedure", b =>
                {
                    b.Navigation("Cattles");

                    b.Navigation("TaxParams");

                    b.Navigation("TaxStages");
                });

            modelBuilder.Entity("AgilleApi.Domain.Entities.User", b =>
                {
                    b.Navigation("MessageQueues");

                    b.Navigation("UserPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
